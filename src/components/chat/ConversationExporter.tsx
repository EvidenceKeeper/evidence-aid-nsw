import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Download, FileText, Printer } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import type { ChatMessage } from '@/types/chat';

interface ConversationExporterProps {
  messages: ChatMessage[];
  caseTitle?: string;
}

export function ConversationExporter({ messages, caseTitle = "Case Conversation" }: ConversationExporterProps) {
  const [open, setOpen] = useState(false);
  const [includeTimestamps, setIncludeTimestamps] = useState(true);
  const [includeCitations, setIncludeCitations] = useState(true);
  const [includeEvidence, setIncludeEvidence] = useState(true);
  const { toast } = useToast();

  const generateHTML = () => {
    const timestamp = new Date().toLocaleDateString();
    
    return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>${caseTitle} - ${timestamp}</title>
  <style>
    body {
      font-family: system-ui, -apple-system, sans-serif;
      max-width: 800px;
      margin: 40px auto;
      padding: 0 20px;
      line-height: 1.6;
      color: #333;
    }
    h1 {
      color: #1a1a1a;
      border-bottom: 3px solid #3b82f6;
      padding-bottom: 10px;
    }
    .metadata {
      background: #f3f4f6;
      padding: 15px;
      border-radius: 8px;
      margin: 20px 0;
    }
    .message {
      margin: 20px 0;
      padding: 15px;
      border-radius: 8px;
    }
    .user-message {
      background: #e0f2fe;
      border-left: 4px solid #3b82f6;
    }
    .assistant-message {
      background: #f0fdf4;
      border-left: 4px solid #10b981;
    }
    .message-header {
      font-weight: 600;
      margin-bottom: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .timestamp {
      font-size: 0.875rem;
      color: #6b7280;
    }
    .citations {
      margin-top: 10px;
      padding: 10px;
      background: white;
      border-radius: 4px;
    }
    .citation-title {
      font-weight: 600;
      font-size: 0.875rem;
      color: #374151;
      margin-bottom: 5px;
    }
    .citation-item {
      font-size: 0.875rem;
      padding: 5px 0;
      border-bottom: 1px solid #e5e7eb;
    }
    .citation-item:last-child {
      border-bottom: none;
    }
    @media print {
      body {
        margin: 20px;
      }
      .no-print {
        display: none;
      }
    }
  </style>
</head>
<body>
  <h1>${caseTitle}</h1>
  
  <div class="metadata">
    <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
    <p><strong>Total Messages:</strong> ${messages.length}</p>
    <p><strong>NSW Coercive Control Case Documentation</strong></p>
  </div>

  ${messages.map((msg, idx) => `
    <div class="message ${msg.role === 'user' ? 'user-message' : 'assistant-message'}">
      <div class="message-header">
        <span>${msg.role === 'user' ? 'ðŸ‘¤ You' : 'ðŸ¤– Veronica Legal Assistant'}</span>
        ${includeTimestamps ? `<span class="timestamp">${msg.timestamp.toLocaleString()}</span>` : ''}
      </div>
      <div>${msg.content.replace(/\n/g, '<br>')}</div>
      
      ${includeCitations && msg.citations && msg.citations.length > 0 ? `
        <div class="citations">
          <div class="citation-title">ðŸ“š Legal References:</div>
          ${msg.citations.map(cite => `
            <div class="citation-item">
              <strong>${cite.file_name}</strong> - ${cite.excerpt.substring(0, 200)}${cite.excerpt.length > 200 ? '...' : ''}
            </div>
          `).join('')}
        </div>
      ` : ''}

      ${includeEvidence && msg.files && msg.files.length > 0 ? `
        <div class="citations">
          <div class="citation-title">ðŸ“Ž Evidence Files:</div>
          ${msg.files.map(file => `
            <div class="citation-item">
              ${file.name} - Status: ${file.status}
            </div>
          `).join('')}
        </div>
      ` : ''}
    </div>
  `).join('')}

  <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 0.875rem;">
    <p>This document contains confidential legal information. Handle according to legal privilege requirements.</p>
    <p>Generated by Veronica Legal Assistant - NSW Coercive Control Evidence Expert</p>
  </div>
</body>
</html>`;
  };

  const exportAsHTML = () => {
    const html = generateHTML();
    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${caseTitle.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Exported Successfully",
      description: "Conversation saved as HTML file"
    });
    setOpen(false);
  };

  const printConversation = () => {
    const html = generateHTML();
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(html);
      printWindow.document.close();
      setTimeout(() => {
        printWindow.print();
      }, 250);
    }
    setOpen(false);
  };

  const exportAsText = () => {
    let text = `${caseTitle}\n`;
    text += `Generated: ${new Date().toLocaleString()}\n`;
    text += `Total Messages: ${messages.length}\n`;
    text += `${'='.repeat(60)}\n\n`;

    messages.forEach((msg, idx) => {
      text += `${msg.role.toUpperCase()}: `;
      if (includeTimestamps) {
        text += `[${msg.timestamp.toLocaleString()}]\n`;
      } else {
        text += '\n';
      }
      text += `${msg.content}\n`;

      if (includeCitations && msg.citations && msg.citations.length > 0) {
        text += '\nLegal References:\n';
        msg.citations.forEach(cite => {
          text += `  - ${cite.file_name}: ${cite.excerpt.substring(0, 200)}...\n`;
        });
      }

      if (includeEvidence && msg.files && msg.files.length > 0) {
        text += '\nEvidence Files:\n';
        msg.files.forEach(file => {
          text += `  - ${file.name} (${file.status})\n`;
        });
      }

      text += '\n' + '-'.repeat(60) + '\n\n';
    });

    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${caseTitle.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Exported Successfully",
      description: "Conversation saved as text file"
    });
    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Download className="h-4 w-4 mr-2" />
          Export Conversation
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Export Conversation</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <Checkbox 
                id="timestamps" 
                checked={includeTimestamps}
                onCheckedChange={(checked) => setIncludeTimestamps(checked as boolean)}
              />
              <Label htmlFor="timestamps">Include timestamps</Label>
            </div>
            
            <div className="flex items-center space-x-2">
              <Checkbox 
                id="citations" 
                checked={includeCitations}
                onCheckedChange={(checked) => setIncludeCitations(checked as boolean)}
              />
              <Label htmlFor="citations">Include legal citations</Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox 
                id="evidence" 
                checked={includeEvidence}
                onCheckedChange={(checked) => setIncludeEvidence(checked as boolean)}
              />
              <Label htmlFor="evidence">Include evidence references</Label>
            </div>
          </div>

          <div className="space-y-2">
            <Button onClick={exportAsHTML} className="w-full">
              <FileText className="h-4 w-4 mr-2" />
              Export as HTML (Formatted)
            </Button>
            
            <Button onClick={exportAsText} variant="outline" className="w-full">
              <FileText className="h-4 w-4 mr-2" />
              Export as Text
            </Button>

            <Button onClick={printConversation} variant="outline" className="w-full">
              <Printer className="h-4 w-4 mr-2" />
              Print Conversation
            </Button>
          </div>

          <p className="text-xs text-muted-foreground text-center">
            Export contains {messages.length} messages. Perfect for lawyer meetings and case documentation.
          </p>
        </div>
      </DialogContent>
    </Dialog>
  );
}
